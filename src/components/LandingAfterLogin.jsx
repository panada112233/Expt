// (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import imgPath from '../assets/clock.png';
import AOS from 'aos';
import 'aos/dist/aos.css';


const LandingAfterLogin = () => {
    const navigate = useNavigate();
    const [currentTime, setCurrentTime] = useState(new Date());
    const [userName, setUserName] = useState('‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    const [profileImage, setProfileImage] = useState(null);
    const [todayWorktime, setTodayWorktime] = useState(null);
    const [modalOpen, setModalOpen] = useState(false);
    const [modalMessage, setModalMessage] = useState('');
    const [modalConfirmAction, setModalConfirmAction] = useState(null);

    const [location, setLocation] = useState('');
    const [leaveType, setLeaveType] = useState('');

    const userID = sessionStorage.getItem('userId');

    useEffect(() => {
        // ‚è∞ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤
        const interval = setInterval(() => {
            setCurrentTime(new Date());
        }, 1000);

        // ‚ú® ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å AOS.init() ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢
        AOS.init({
            duration: 1000, // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß animation
            once: true,     // ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        });

        // üßπ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå interval ‡∏ï‡∏≠‡∏ô component ‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ (unmount)
        return () => clearInterval(interval);
    }, []);


    const fetchData = async (userId) => {
        try {
            const profileImgUrl = `https://localhost:7039/api/Files/GetProfileImage?userID=${userId}`;
            setProfileImage(profileImgUrl);

            const userRes = await axios.get(`https://localhost:7039/api/Users/Getbyid/${userId}`);
            const userData = userRes.data;
            setUserName(`${userData.firstName} ${userData.lastName}`);

            const today = new Date().toISOString().split("T")[0];
            const worktimeRes = await axios.get("https://localhost:7039/api/Worktime");
            const userWork = worktimeRes.data.find(item =>
                item.userID === parseInt(userId) && item.date.startsWith(today)
            );
            setTodayWorktime(userWork || {});
        } catch (error) {
            console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
        }
    };

    useEffect(() => {
        if (userID) {
            fetchData(userID);
        }
    }, [userID]);

    const getAddressFromCoords = async (lat, lng) => {
        const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lng}&format=json&accept-language=th`;
        try {
            const response = await fetch(url);
            const data = await response.json();
            const address = data.address;
            if (!address) return '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà';
            const road = address.road || '';
            const suburb = address.suburb || '';
            const district = address.city_district || address.district || '';
            const city = address.city || address.town || address.village || '';
            const state = address.state || '';
            const postcode = address.postcode || '';
            return [road, suburb, district, city, state, postcode].filter(part => part && part.trim() !== '').join(', ');
        } catch (error) {
            console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏î‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:', error);
            return '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î';
        }
    };

    const handleCheckIn = () => {
        if (!location) {
            setModalMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô");
            setModalConfirmAction(null);
            setModalOpen(true);
            return;
        }

        if (['‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢', '‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß'].includes(location) && !leaveType) {
            setModalMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏•‡∏≤");
            setModalConfirmAction(null);
            setModalOpen(true);
            return;
        }

        if (!navigator.geolocation) {
            setModalMessage("‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á");
            setModalConfirmAction(null);
            setModalOpen(true);
            return;
        }

        navigator.geolocation.getCurrentPosition(
            async (position) => {
                const { latitude, longitude } = position.coords;

                const finalLocation =
                    ['‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß', '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢'].includes(location)
                        ? `${location} - ${leaveType}`
                        : location === '‡∏•‡∏≤‡∏ö‡∏ß‡∏ä'
                            ? '‡∏•‡∏≤‡∏ö‡∏ß‡∏ä - ‡πÄ‡∏ï‡πá‡∏°‡∏ß‡∏±‡∏ô'
                            : location;

                const today = new Date().toLocaleDateString('th-TH', {
                    day: '2-digit',
                    month: 'long',
                    year: 'numeric',
                });

                const address = await getAddressFromCoords(latitude, longitude);

                const message = `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${today}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${finalLocation}
‡∏û‡∏¥‡∏Å‡∏±‡∏î: Lat: ${latitude}, Lng: ${longitude}
‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${address}

‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`;

                setModalMessage(message);
                setModalConfirmAction(() => async () => {
                    try {
                        const formData = new FormData();
                        formData.append('userID', userID);
                        formData.append('location', finalLocation);
                        formData.append('latitude', latitude);
                        formData.append('longitude', longitude);
                        formData.append('address', address);

                        await axios.post('https://localhost:7039/api/Worktime/CheckIn', formData);
                        setModalMessage("‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà : " + finalLocation);
                        await fetchData(userID);
                    } catch (error) {
                        if (error.response && error.response.status === 400) {
                            const errorText = error.response.data;
                            if (errorText.includes("‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")) {
                                setModalMessage("‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ");
                            } else {
                                setModalMessage(errorText);
                            }
                        } else {
                            setModalMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô");
                        }
                    }
                    setModalConfirmAction(null);
                    setModalOpen(true);
                });
                setModalOpen(true);
            },
            (error) => {
                setModalMessage(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ: ${error.message}`);
                setModalConfirmAction(null);
                setModalOpen(true);
            },
            { enableHighAccuracy: true }
        );
    };

    const handleCheckOut = () => {
        const now = new Date();
        const hour = now.getHours();
        const minute = now.getMinutes();

        // ‚ùå ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 17:30
        if (hour < 17 || (hour === 17 && minute < 30)) {
            setModalMessage("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 17:30");
            setModalConfirmAction(null);
            setModalOpen(true);
            return;
        }

        // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡πá‡∏≠‡∏õ‡∏≠‡∏±‡∏õ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        const today = now.toLocaleDateString('th-TH', {
            day: '2-digit',
            month: 'long',
            year: 'numeric',
        });

        const message = `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${today}
‚è± ‡πÄ‡∏ß‡∏•‡∏≤: ${now.toLocaleTimeString('th-TH', { hour12: false })}
    
‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`;

        setModalMessage(message);
        setModalConfirmAction(() => async () => {
            try {
                const formData = new FormData();
                formData.append('userID', userID);

                await axios.post('https://localhost:7039/api/Worktime/CheckOut', formData);
                setModalMessage("‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
                await fetchData(userID);
            } catch (error) {
                if (error.response && error.response.status === 400) {
                    setModalMessage(error.response.data);
                } else if (error.response && error.response.status === 404) {
                    setModalMessage("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ");
                } else {
                    setModalMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå");
                }
            }
            setModalConfirmAction(null);
            setModalOpen(true);
        });

        setModalOpen(true);
    };

    return (
        <div className="flex flex-col min-h-screen bg-gradient-to-r from-blue-100 via-white to-blue-200">
            <div className="flex flex-col items-center justify-center flex-1 py-10">
                <div className="text-lg mb-2 text-blue-900 font-bold font-FontNoto">‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏Ñ‡∏∏‡∏ì {userName}</div>
                <div className="text-lg mb-6 font-mono bg-white/70 px-4 py-2 rounded-full shadow-md font-bold">
                    ‚è∞ {currentTime.toLocaleTimeString('th-TH', { hour12: false })}
                </div>

                <div className="flex flex-wrap justify-center gap-6 sm:gap-10 bg-white p-4 sm:p-8 rounded-xl shadow-xl w-[80%] max-w-md sm:max-w-lg lg:max-w-2xl mx-auto">

                    {/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô */}
                    <div
                        data-aos="zoom-in"            // ‡πÉ‡∏™‡πà AOS ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
                        data-aos-duration="1200"      // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πâ‡∏≤ (ms) 1200 = 1.2 ‡∏ß‡∏¥
                        onClick={() => setModalOpen(true)}
                        className="bg-blue-300 hover:bg-blue-400 cursor-pointer text-black p-6 rounded-xl w-64 flex flex-col items-center shadow-lg transition-all duration-300"
                    >
                        <img src={imgPath} alt="clock" className="w-20 h-20 object-contain mb-4 animate-float-slow" />
                        <p className="font-bold text-md text-center font-FontNoto">‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô</p>
                        <div className="w-full text-left space-y-1 mt-2">
                            <p className="text-sm font-FontNoto">üïò ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô: {todayWorktime?.checkIn || '-'}</p>
                            <p className="text-sm font-FontNoto">üïî ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå: {todayWorktime?.checkOut || '-'}</p>
                            <p className="text-sm font-FontNoto">üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {todayWorktime?.location || '-'}</p>
                        </div>
                    </div>

                    {/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà 2: Profile */}
                    <div
                        data-aos="zoom-in"            // ‡πÉ‡∏™‡πà AOS ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
                        data-aos-duration="1200"      // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πâ‡∏≤ (ms) 1200 = 1.2 ‡∏ß‡∏¥
                        onClick={() => navigate('/EmpHome/Workplan')}
                        className="bg-pink-300 hover:bg-pink-400 cursor-pointer text-black p-6 rounded-xl w-64 flex flex-col items-center shadow-lg transition-all duration-300"
                    >
                        <img
                            src={profileImage}
                            alt="profile"
                            className="w-20 h-20 rounded-full object-cover shadow-lg border-2 border-white"
                        />
                        <p className="font-bold text-md text-center font-FontNoto mt-3">{userName}</p>
                        <p className="text-sm text-center mt-2 font-FontNoto font-bold">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö EXPT</p>
                    </div>

                </div>

            </div>

            {modalOpen && (
                <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50 animate-fade-in">
                    <div className="bg-white p-6 rounded-2xl shadow-2xl w-96 relative transition-transform">
                        <img src="https://cdn-icons-png.flaticon.com/512/616/616408.png" alt="cute"
                            className="w-12 h-12 absolute -top-6 left-4 rounded-full border-4 border-white shadow-lg bg-pink-100" />
                        <div className="flex justify-between items-center mb-4">
                            <h3 className="text-lg font-bold text-pink-600 font-FontNoto">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤</h3>
                            <button
                                onClick={() => {
                                    setModalOpen(false);
                                    setModalMessage('');
                                    setModalConfirmAction(null); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢
                                }}
                                className="text-red-500 text-lg font-bold"
                            >
                                ‚ùå
                            </button>

                        </div>
                        {modalMessage ? (
                            <p className="text-gray-700 mb-4 whitespace-pre-wrap font-FontNoto">{modalMessage}</p>
                        ) : (
                            <>
                                {todayWorktime?.checkIn ? (
                                    // üîí ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
                                    <div className="text-gray-600 font-FontNoto mb-4">
                                        ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {todayWorktime.checkIn}
                                    </div>
                                ) : (
                                    <>
                                        <div className="mb-3">
                                            <label className="block text-sm font-FontNoto mb-1">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</label>
                                            <select
                                                className="select select-bordered w-full font-FontNoto"
                                                value={location}
                                                onChange={(e) => {
                                                    setLocation(e.target.value);
                                                    setLeaveType('');
                                                }}
                                            >
                                                <option value="" disabled>-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --</option>
                                                {[
                                                    'Office', 'WFH', 'Off-site (‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô)', '‡πÄ‡∏ä‡πâ‡∏≤ WFH ‡∏ö‡πà‡∏≤‡∏¢ Office',
                                                    '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢', '‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß', '‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô', '‡∏•‡∏≤‡∏Ñ‡∏•‡∏≠‡∏î', '‡∏•‡∏≤‡∏ö‡∏ß‡∏ä'
                                                ].map(place => (
                                                    <option className="font-FontNoto" key={place} value={place}>{place}</option>
                                                ))}
                                            </select>
                                        </div>

                                        {['‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢', '‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß'].includes(location) && (
                                            <div className="mb-4">
                                                <label className="block text-sm font-FontNoto mb-1">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤</label>
                                                <select
                                                    className="select select-bordered w-full font-FontNoto"
                                                    value={leaveType}
                                                    onChange={(e) => setLeaveType(e.target.value)}
                                                >
                                                    <option value="" disabled>-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ --</option>
                                                    <option className="font-FontNoto" value="‡πÄ‡∏ï‡πá‡∏°‡∏ß‡∏±‡∏ô">‡πÄ‡∏ï‡πá‡∏°‡∏ß‡∏±‡∏ô</option>
                                                    <option className="font-FontNoto" value="‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏ä‡πâ‡∏≤">‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏ä‡πâ‡∏≤</option>
                                                    <option className="font-FontNoto" value="‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ö‡πà‡∏≤‡∏¢">‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ö‡πà‡∏≤‡∏¢</option>
                                                </select>
                                            </div>
                                        )}
                                    </>
                                )}

                                {/* ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á */}
                                {todayWorktime?.checkOut ? (
                                    <div className="text-green-700 font-FontNoto mb-2">
                                        ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ß‡∏•‡∏≤ {todayWorktime.checkOut}
                                    </div>
                                ) : (
                                    <div className="flex justify-end gap-2">
                                        {!todayWorktime?.checkIn && (
                                            <button className="btn btn-success font-FontNoto" onClick={handleCheckIn}>‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô</button>
                                        )}
                                        {todayWorktime?.checkIn && (
                                            <button className="btn btn-warning font-FontNoto" onClick={handleCheckOut}>‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå</button>
                                        )}
                                    </div>
                                )}
                            </>
                        )}

                        {modalConfirmAction && (
                            <div className="flex justify-end gap-2 mt-4">
                                <button className="btn btn-success font-FontNoto" onClick={modalConfirmAction}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</button>
                                <button
                                    onClick={() => {
                                        setModalOpen(false);
                                        setModalMessage('');
                                        setModalConfirmAction(null); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
                                    }}
                                    className="btn btn-outline font-FontNoto"
                                >
                                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                                </button>
                            </div>
                        )}
                    </div>
                </div>
            )}
        </div>
    );
};

export default LandingAfterLogin;
