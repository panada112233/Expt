import React, { useEffect, useState } from 'react';
import axios from 'axios';
import AOS from 'aos';
import 'aos/dist/aos.css';

const Workplan = () => {
    const today = new Date();
    const [month, setMonth] = useState(today.getMonth());
    const [year, setYear] = useState(today.getFullYear());
    const [tasks, setTasks] = useState({});
    const [selectedDate, setSelectedDate] = useState(null);
    const [taskData, setTaskData] = useState({ morning: '', evening: '' });
    const [showModal, setShowModal] = useState(false);
    const [userName, setUserName] = useState('‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô');
    const [userId, setUserId] = useState(null);
    const [roleText, setRoleText] = useState("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...");
    const [isHoliday, setIsHoliday] = useState(false);
    const [todayWorktime, setTodayWorktime] = useState(null);
    const [notes, setNotes] = useState({});

    const [todayPlan, setTodayPlan] = useState(null);
    const getCompensatedHolidays = (year, holidays) => {
        const compensated = {};
        const usedDates = new Set(Object.keys(holidays));

        Object.entries(holidays).forEach(([key, name]) => {
            const [mm, dd] = key.split('-');
            const date = new Date(`${year}-${mm}-${dd}`);
            const day = date.getDay();

            if (day === 0 || day === 6) {
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå ‚Üí ‡∏´‡∏≤ "‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ" ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ
                let next = new Date(date);
                do {
                    next.setDate(next.getDate() + 1);
                    const newKey = `${String(next.getMonth() + 1).padStart(2, '0')}-${String(next.getDate()).padStart(2, '0')}`;
                    if (!usedDates.has(newKey) && (next.getDay() !== 0 && next.getDay() !== 6)) {
                        compensated[newKey] = `‡∏ä‡∏î‡πÄ‡∏ä‡∏¢${name}`;
                        usedDates.add(newKey);
                        break;
                    }
                } while (true);
            }
        });

        return compensated;
    };

    const thaiMonths = [
        "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
        "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
    ];

    const roleMapping = {
        Hr: "‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•",
        GM: "‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
        Dev: "‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö",
        BA: "‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à",
        Employee: "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô",
    };

    const holidaysByYear = {
        2024: {
            "01-01": "‡∏ß‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà",
            "04-06": "‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏µ",
            "04-13": "‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå",
            "04-14": "‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå",
            "04-15": "‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå",
            "05-01": "‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô",
            "05-04": "‡∏ß‡∏±‡∏ô‡∏â‡∏±‡∏ï‡∏£‡∏°‡∏á‡∏Ñ‡∏•",
            "06-03": "‡∏ß‡∏±‡∏ô‡πÄ‡∏â‡∏•‡∏¥‡∏°‡∏£‡∏≤‡∏ä‡∏¥‡∏ô‡∏µ",
            "07-28": "‡∏ß‡∏±‡∏ô‡πÄ‡∏â‡∏•‡∏¥‡∏°‡∏û‡∏£‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏±‡∏ß",
            "08-12": "‡∏ß‡∏±‡∏ô‡πÅ‡∏°‡πà‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥",
            "10-13": "‡∏ß‡∏±‡∏ô‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡∏ï ‡∏£.9",
            "10-23": "‡∏ß‡∏±‡∏ô‡∏õ‡∏¥‡∏¢‡∏°‡∏´‡∏≤‡∏£‡∏≤‡∏ä",
            "12-05": "‡∏ß‡∏±‡∏ô‡∏û‡πà‡∏≠‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥",
            "12-10": "‡∏ß‡∏±‡∏ô‡∏£‡∏±‡∏ê‡∏ò‡∏£‡∏£‡∏°‡∏ô‡∏π‡∏ç",
            "12-31": "‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏õ‡∏µ"
        },
        2025: {
            "01-01": "‡∏ß‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà",
            "02-12": "‡∏ß‡∏±‡∏ô‡∏°‡∏≤‡∏Ü‡∏ö‡∏π‡∏ä‡∏≤",
            "04-06": "‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏µ",
            "04-13": "‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå",
            "04-14": "‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå",
            "04-15": "‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå",
            "05-01": "‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô",
            "05-04": "‡∏ß‡∏±‡∏ô‡∏â‡∏±‡∏ï‡∏£‡∏°‡∏á‡∏Ñ‡∏•",
            "05-11": "‡∏ß‡∏±‡∏ô‡∏ß‡∏¥‡∏™‡∏≤‡∏Ç‡∏ö‡∏π‡∏ä‡∏≤",
            "06-03": "‡∏ß‡∏±‡∏ô‡πÄ‡∏â‡∏•‡∏¥‡∏°‡∏£‡∏≤‡∏ä‡∏¥‡∏ô‡∏µ",
            "07-10": "‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏™‡∏≤‡∏¨‡∏´‡∏ö‡∏π‡∏ä‡∏≤",
            "07-11": "‡∏ß‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏£‡∏£‡∏©‡∏≤",
            "07-28": "‡∏ß‡∏±‡∏ô‡πÄ‡∏â‡∏•‡∏¥‡∏°‡∏û‡∏£‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏±‡∏ß",
            "08-12": "‡∏ß‡∏±‡∏ô‡πÅ‡∏°‡πà‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥",
            "10-13": "‡∏ß‡∏±‡∏ô‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡∏ï ‡∏£.9",
            "10-23": "‡∏ß‡∏±‡∏ô‡∏õ‡∏¥‡∏¢‡∏°‡∏´‡∏≤‡∏£‡∏≤‡∏ä",
            "12-05": "‡∏ß‡∏±‡∏ô‡∏û‡πà‡∏≠‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥",
            "12-10": "‡∏ß‡∏±‡∏ô‡∏£‡∏±‡∏ê‡∏ò‡∏£‡∏£‡∏°‡∏ô‡∏π‡∏ç",
            "12-31": "‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏õ‡∏µ"
        },
        2026: {
            "01-01": "‡∏ß‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà",
            "01-02": "‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© (‡∏Ñ‡∏£‡∏°.)",
            "03-03": "‡∏ß‡∏±‡∏ô‡∏°‡∏≤‡∏Ü‡∏ö‡∏π‡∏ä‡∏≤",
            "04-06": "‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏µ",
            "04-13": "‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå",
            "04-14": "‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå",
            "04-15": "‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå",
            "05-01": "‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô",
            "05-04": "‡∏ß‡∏±‡∏ô‡∏â‡∏±‡∏ï‡∏£‡∏°‡∏á‡∏Ñ‡∏•",
            "05-31": "‡∏ß‡∏±‡∏ô‡∏ß‡∏¥‡∏™‡∏≤‡∏Ç‡∏ö‡∏π‡∏ä‡∏≤",
            "06-03": "‡∏ß‡∏±‡∏ô‡πÄ‡∏â‡∏•‡∏¥‡∏°‡∏£‡∏≤‡∏ä‡∏¥‡∏ô‡∏µ",
            "07-28": "‡∏ß‡∏±‡∏ô‡πÄ‡∏â‡∏•‡∏¥‡∏°‡∏û‡∏£‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏±‡∏ß",
            "07-29": "‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏™‡∏≤‡∏¨‡∏´‡∏ö‡∏π‡∏ä‡∏≤",
            "07-30": "‡∏ß‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏£‡∏£‡∏©‡∏≤",
            "08-12": "‡∏ß‡∏±‡∏ô‡πÅ‡∏°‡πà‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥",
            "10-13": "‡∏ß‡∏±‡∏ô‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡∏ï ‡∏£.9",
            "10-23": "‡∏ß‡∏±‡∏ô‡∏õ‡∏¥‡∏¢‡∏°‡∏´‡∏≤‡∏£‡∏≤‡∏ä",
            "12-05": "‡∏ß‡∏±‡∏ô‡∏û‡πà‡∏≠‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥",
            "12-10": "‡∏ß‡∏±‡∏ô‡∏£‡∏±‡∏ê‡∏ò‡∏£‡∏£‡∏°‡∏ô‡∏π‡∏ç",
            "12-31": "‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏õ‡∏µ"
        },
        2027: {
            "01-01": "‡∏ß‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà",
            "02-21": "‡∏ß‡∏±‡∏ô‡∏°‡∏≤‡∏Ü‡∏ö‡∏π‡∏ä‡∏≤",
            "04-06": "‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏µ",
            "04-13": "‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå",
            "04-14": "‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå",
            "04-15": "‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå",
            "05-01": "‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô",
            "05-04": "‡∏ß‡∏±‡∏ô‡∏â‡∏±‡∏ï‡∏£‡∏°‡∏á‡∏Ñ‡∏•",
            "05-20": "‡∏ß‡∏±‡∏ô‡∏ß‡∏¥‡∏™‡∏≤‡∏Ç‡∏ö‡∏π‡∏ä‡∏≤",
            "06-03": "‡∏ß‡∏±‡∏ô‡πÄ‡∏â‡∏•‡∏¥‡∏°‡∏£‡∏≤‡∏ä‡∏¥‡∏ô‡∏µ",
            "07-18": "‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏™‡∏≤‡∏¨‡∏´‡∏ö‡∏π‡∏ä‡∏≤",
            "07-20": "‡∏ß‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏£‡∏£‡∏©‡∏≤",
            "07-28": "‡∏ß‡∏±‡∏ô‡πÄ‡∏â‡∏•‡∏¥‡∏°‡∏û‡∏£‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏±‡∏ß",
            "08-12": "‡∏ß‡∏±‡∏ô‡πÅ‡∏°‡πà‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥",
            "10-13": "‡∏ß‡∏±‡∏ô‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡∏ï ‡∏£.9",
            "10-23": "‡∏ß‡∏±‡∏ô‡∏õ‡∏¥‡∏¢‡∏°‡∏´‡∏≤‡∏£‡∏≤‡∏ä",
            "12-05": "‡∏ß‡∏±‡∏ô‡∏û‡πà‡∏≠‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥",
            "12-10": "‡∏ß‡∏±‡∏ô‡∏£‡∏±‡∏ê‡∏ò‡∏£‡∏£‡∏°‡∏ô‡∏π‡∏ç",
            "12-31": "‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏õ‡∏µ"
        }
    };

    // Template ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏õ‡∏µ 2028-2034
    const baseHolidayTemplate = {
        "01-01": "‡∏ß‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà",
        "04-06": "‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏µ",
        "04-13": "‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå",
        "04-14": "‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå",
        "04-15": "‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå",
        "05-01": "‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô",
        "05-04": "‡∏ß‡∏±‡∏ô‡∏â‡∏±‡∏ï‡∏£‡∏°‡∏á‡∏Ñ‡∏•",
        "06-03": "‡∏ß‡∏±‡∏ô‡πÄ‡∏â‡∏•‡∏¥‡∏°‡∏£‡∏≤‡∏ä‡∏¥‡∏ô‡∏µ",
        "07-28": "‡∏ß‡∏±‡∏ô‡πÄ‡∏â‡∏•‡∏¥‡∏°‡∏û‡∏£‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏±‡∏ß",
        "08-12": "‡∏ß‡∏±‡∏ô‡πÅ‡∏°‡πà‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥",
        "10-13": "‡∏ß‡∏±‡∏ô‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡∏ï ‡∏£.9",
        "10-23": "‡∏ß‡∏±‡∏ô‡∏õ‡∏¥‡∏¢‡∏°‡∏´‡∏≤‡∏£‡∏≤‡∏ä",
        "12-05": "‡∏ß‡∏±‡∏ô‡∏û‡πà‡∏≠‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥",
        "12-10": "‡∏ß‡∏±‡∏ô‡∏£‡∏±‡∏ê‡∏ò‡∏£‡∏£‡∏°‡∏ô‡∏π‡∏ç",
        "12-31": "‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏õ‡∏µ"
    };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏µ 2028‚Äì2034 ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ template ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    for (let year = 2028; year <= 2034; year++) {
        holidaysByYear[year] = { ...baseHolidayTemplate };
    }

    // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Workplan component:
    const currentYearHolidays = holidaysByYear[year] || {};
    const compensated = getCompensatedHolidays(year, currentYearHolidays);
    const thaiHolidays = { ...currentYearHolidays, ...compensated };

    useEffect(() => {
        const loadUserDataAndTodayData = async () => {
            const id = parseInt(sessionStorage.getItem('userId'));
            if (!id) return;

            setUserId(id);

            try {
                // üîπ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                const userRes = await axios.get(`https://localhost:7039/api/Users/Getbyid/${id}`);
                if (userRes.status === 200) {
                    const userData = userRes.data;
                    setUserName(`${userData.firstName} ${userData.lastName}`);

                    const role = userData.role; // ‡πÄ‡∏ä‡πà‡∏ô "Dev", "Hr"
                    const mapped = roleMapping[role] || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á";
                    setRoleText(mapped);
                }

                // üîπ ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                const planRes = await axios.get(`https://localhost:7039/api/Workplan/${id}`);
                const loadedTasks = {};
                const today = new Date();
                const todayKey = `${id}-${today.getFullYear()}-${today.getMonth() + 1}-${today.getDate()}`;

                planRes.data.forEach((t) => {
                    const d = new Date(t.date);
                    const key = `${t.userID}-${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`;

                    loadedTasks[key] = {
                        morning: t.morningTask,
                        evening: t.eveningTask,
                        privateNote: t.privateNote || "",     // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
                        noteType: t.noteType || "public"      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
                    };

                    // üîç ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ todayPlan ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏•‡∏¢
                    if (
                        d.getFullYear() === today.getFullYear() &&
                        d.getMonth() === today.getMonth() &&
                        d.getDate() === today.getDate()
                    ) {
                        setTodayPlan({
                            ...t,
                            privateNote: t.privateNote || "",   // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
                            noteType: t.noteType || "public"
                        });
                    }
                });

                setTasks(loadedTasks);

                // üîπ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
                const worktimeRes = await axios.get("https://localhost:7039/api/Worktime");
                const userWork = worktimeRes.data.find(item => item.userID === id && item.date.startsWith(today.toISOString().split("T")[0]));
                setTodayWorktime(userWork || {});

            } catch (error) {
                console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
            }
        };
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AOS
        AOS.init({
            duration: 1500,  // ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ã‡∏π‡∏°‡∏ä‡πâ‡∏≤‡πÜ
            easing: 'ease-in-out',  // ‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ã‡∏π‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô
        });

        loadUserDataAndTodayData();
    }, []);

    useEffect(() => {
        const storedNotes = JSON.parse(localStorage.getItem("notes") || "{}");
        setNotes(storedNotes);
    }, []);


    const clearPrivateNoteFromDatabase = async (dateToClear) => {
        try {
            const res = await axios.get(`https://localhost:7039/api/Workplan/${userId}`);

            const taskForTheDay = res.data.find(t =>
                new Date(t.date).toDateString() === new Date(dateToClear).toDateString()
            );

            if (taskForTheDay) {
                const updatedTask = {
                    ...taskForTheDay,
                    privateNote: "", // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡πÇ‡∏ô‡πâ‡∏ï‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
                };

                await axios.put(`https://localhost:7039/api/Workplan/${taskForTheDay.id}`, updatedTask);

            } else {
                console.warn("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô");
            }
        } catch (error) {
            console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡πÇ‡∏ô‡πâ‡∏ï‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß:", error);
        }
    };

    const deleteTaskFromDatabase = async (dateToDelete) => {
        try {
            const res = await axios.get(`https://localhost:7039/api/Workplan/${userId}`);

            const taskForTheDay = res.data.find(t =>
                new Date(t.date).toDateString() === new Date(dateToDelete).toDateString()
            );

            if (taskForTheDay) {
                const updatedTask = {
                    ...taskForTheDay,
                    morningTask: "",
                    eveningTask: "",
                    // ‚úÖ ‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤ privateNote ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ
                    privateNote: taskForTheDay.privateNote || "",
                    noteType: taskForTheDay.noteType || "public",
                };

                await axios.put(`https://localhost:7039/api/Workplan/${taskForTheDay.id}`, updatedTask);
            } else {
                console.warn("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô");
            }
        } catch (error) {
            console.error('‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', error);
        }
    };

    const getDaysInMonth = (month, year) => new Date(year, month + 1, 0).getDate();
    const firstDayOfMonth = new Date(year, month, 1).getDay();
    const daysInMonth = getDaysInMonth(month, year);

    const openModal = (date) => {
        const fullDate = new Date(year, month, date);
        const dayOfWeek = fullDate.getDay();

        const key = `${userId}-${year}-${month + 1}-${date}`;
        const existing = tasks[key] || {};

        setSelectedDate(date);

        // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï noteType ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        setTaskData({
            morning: existing.morning || '',
            evening: existing.evening || '',
            privateNote: existing.privateNote || "",
            noteType: '', // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        });

        // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î: ‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£
        const dateObj = new Date(year, month, date);
        const fullDateKey = `${dateObj.getFullYear()}-${String(dateObj.getMonth() + 1).padStart(2, '0')}-${String(dateObj.getDate()).padStart(2, '0')}`;

        const currentYearHolidays = holidaysByYear[year] || {};
        const compensated = getCompensatedHolidays(year, currentYearHolidays);
        const thaiHolidays = { ...currentYearHolidays, ...compensated };
        const holidayName = thaiHolidays[fullDateKey];
        const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;
        const isThaiHoliday = !!holidayName;

        setIsHoliday(isWeekend || isThaiHoliday);
        setShowModal(true);
    };

    const saveOrUpdateTaskToDatabase = async (task) => {
        try {
            // ‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠ field ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö backend
            const mappedTask = {
                ...task,
                PrivateNote: task.personalNote,     // ‚úî ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö backend
                NoteType: task.noteType,            // ‚úî ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏á backend ‡πÅ‡∏•‡πâ‡∏ß
            };

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            const res = await axios.get(`https://localhost:7039/api/Workplan/${task.userID}`);
            const sameDayTasks = res.data.filter(t =>
                new Date(t.date).toDateString() === new Date(task.date).toDateString()
            );

            if (sameDayTasks.length > 0) {
                // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô
                await axios.put(`https://localhost:7039/api/Workplan/${sameDayTasks[0].id}`, {
                    ...mappedTask,
                    id: sameDayTasks[0].id
                });

                for (let i = 1; i < sameDayTasks.length; i++) {
                    await axios.delete(`https://localhost:7039/api/Workplan/${sameDayTasks[i].id}`);
                }
            } else {
                // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏´‡∏°‡πà
                await axios.post('https://localhost:7039/api/Workplan', mappedTask);
            }
        } catch (error) {
        }
    };

    const saveTask = async () => {
        const key = `${userId}-${year}-${month + 1}-${selectedDate}`;
        const formattedDate = `${year}-${String(month + 1).padStart(2, '0')}-${String(selectedDate).padStart(2, '0')}`;
        const newTask = {
            userID: parseInt(userId),
            date: formattedDate,
            morningTask: taskData.morning,
            eveningTask: taskData.evening,
            privateNote: taskData.privateNote || "",
            noteType: taskData.noteType || "public"
        };

        await saveOrUpdateTaskToDatabase(newTask);
        setTasks({ ...tasks, [key]: { ...taskData } });

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡πá‡∏ï todayPlan ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        const today = new Date();
        const isToday =
            today.getDate() === selectedDate &&
            today.getMonth() === month &&
            today.getFullYear() === year;

        if (isToday) {
            setTodayPlan(newTask); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πå‡∏î
        }

        setShowModal(false);
    };

    const selectedFullDate = selectedDate ? new Date(year, month, selectedDate) : null;
    const isMonday = selectedFullDate?.getDay() === 1;
    const yesterdayLabel = isMonday ? "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå" : "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô";

    const prevMonth = month === 0 ? 11 : month - 1;
    const nextMonth = month === 11 ? 0 : month + 1;
    const prevMonthYear = month === 0 ? year - 1 : year;
    const nextMonthYear = month === 11 ? year + 1 : year;

    const daysInPrevMonth = getDaysInMonth(prevMonth, prevMonthYear);
    const weeks = [];
    let currentWeek = [];

    // ‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    for (let i = firstDayOfMonth - 1; i >= 0; i--) {
        currentWeek.push({
            day: daysInPrevMonth - i,
            type: 'prev',
            date: new Date(prevMonthYear, prevMonth, daysInPrevMonth - i)
        });
    }

    // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    for (let day = 1; day <= daysInMonth; day++) {
        currentWeek.push({
            day,
            type: 'current',
            date: new Date(year, month, day)
        });

        if (currentWeek.length === 7) {
            weeks.push(currentWeek);
            currentWeek = [];
        }
    }

    // ‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    let nextDay = 1;
    while (currentWeek.length < 7) {
        currentWeek.push({
            day: nextDay,
            type: 'next',
            date: new Date(nextMonthYear, nextMonth, nextDay)
        });
        nextDay++;
    }
    weeks.push(currentWeek);
    return (
        <div className="flex flex-col w-full">
            <div className="w-full bg-gradient-to-r from-cyan-900 via-cyan-600 to-slate-500 text-white rounded-xl p-4 sm:p-5 md:p-6 mb-6 shadow-lg">
                <h1 className="text-xl sm:text-2xl font-bold font-FontNoto leading-snug">
                    ‡∏õ‡∏é‡∏¥‡∏ó‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô{" "}
                    <span className="font-normal font-FontNoto text-base sm:text-lg">
                        {roleText ? `(${roleText})` : ""}
                    </span>
                </h1>
                <p className="text-xs sm:text-sm mt-1 font-FontNoto">‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á</p>
            </div>

            <div className="flex flex-col sm:flex-row gap-4 mt-4 mb-6 animate-fade-in ">
                {/* üü° ‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å */}
                <div className="bg-gradient-to-br from-emerald-50 via-teal-100 to-cyan-50 border border-teal-400 rounded-xl p-4 shadow-md w-full sm:w-72 flex flex-col items-center relative overflow-hidden">
                    <h3 className="text-md font-bold text-teal-800 font-FontNoto mb-2 text-center">
                        ‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
                    </h3>
                    {todayWorktime ? (
                        <div className="font-FontNoto text-xs text-gray-800 space-y-1">
                            <p className="font-FontNoto">üïò ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô: {todayWorktime.checkIn || "-"}</p>
                            <p className="font-FontNoto">üïî ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå: {todayWorktime.checkOut || "-"}</p>
                            <p className="font-FontNoto">üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {todayWorktime.location || "-"}</p>
                        </div>
                    ) : (
                        <p className="font-FontNoto text-xs text-gray-500 text-center">
                            ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å
                        </p>
                    )}
                </div>
                {/* üå∏ ‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ */}
                <div className="bg-orange-50 border border-orange-400 rounded-xl p-3 shadow-md w-full sm:w-72 flex flex-col items-center relative overflow-hidden">
                    <h3 className="text-md font-bold text-orange-800 font-FontNoto mb-2 text-center">üìù ‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</h3>
                    {todayPlan ? (
                        <div className="font-FontNoto text-xs text-gray-800 space-y-1">
                            <p className="font-FontNoto">‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {todayPlan.eveningTask || "-"}</p>
                        </div>
                    ) : (
                        <p className="font-FontNoto text-xs text-gray-500 text-center">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô</p>
                    )}
                </div>

                <div className="bg-green-50 border border-green-400 rounded-xl p-3 shadow-md w-full sm:w-72 flex flex-col items-center relative overflow-hidden">
                    <h3 className="text-md font-bold text-green-800 font-FontNoto mb-2 text-center">üåô ‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô{yesterdayLabel}</h3>
                    {todayPlan ? (
                        <div className="font-FontNoto text-xs text-gray-800 space-y-1 text-center">
                            <p className="font-FontNoto">{yesterdayLabel}: {todayPlan.morningTask || "-"}</p>
                        </div>
                    ) : (
                        <p className="font-FontNoto text-xs text-gray-500 text-center">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô</p>
                    )}
                </div>
            </div>

            <div className="w-full max-w-6xl mx-auto bg-transparent rounded-xl p-6 items-center justify-center">
                <h2 className="text-2xl font-bold mb-2 font-FontNoto text-blue-800 text-center">üêæ ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì {userName} üêæ</h2>
                {/* ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏µ */}
                <div className="flex items-center justify-end space-x-4 mb-4">
                    <select
                        className="select select-bordered w-40 text-black font-FontNoto"
                        value={month}
                        onChange={(e) => setMonth(parseInt(e.target.value))}
                    >
                        {thaiMonths.map((m, idx) => (
                            <option className="font-FontNoto" key={idx} value={idx}>
                                {m}
                            </option>
                        ))}
                    </select>
                    <select
                        className="select select-bordered w-40 text-black font-FontNoto"
                        value={year}
                        onChange={(e) => setYear(parseInt(e.target.value))}
                    >
                        {Array.from({ length: 11 }, (_, i) => 2024 + i).map((y) => (
                            <option className="font-FontNoto" key={y} value={y}>
                                {y + 543}
                            </option>
                        ))}
                    </select>
                </div>
                <div className="relative">
                    {/* ‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏ô */}
                    <div className="grid grid-cols-7 gap-[1px] text-center font-bold bg-gray-400">
                        {["SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"].map((day) => (
                            <div key={day} className="bg-gray-100 py-2 font-FontNoto text-sm text-gray-700">
                                {day}
                            </div>
                        ))}
                    </div>

                    {/* ‡∏ï‡∏±‡∏ß‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô */}
                    <div className="grid grid-cols-7 gap-[1px] bg-gray-300">
                        {weeks.map((week, wi) =>
                            week.map((dayObj, di) => {
                                const { day, type, date } = dayObj;
                                const isWeekend = date.getDay() === 0 || date.getDay() === 6;
                                const isCurrentMonth = type === 'current';

                                // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å holidaysByYear ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏Ñ‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                                const year = date.getFullYear();
                                const month = String(date.getMonth() + 1).padStart(2, '0');
                                const dayStr = String(date.getDate()).padStart(2, '0');
                                const holidayName = holidaysByYear[year]?.[`${month}-${dayStr}`] || null;

                                const dateKey = `${userId}-${year}-${date.getMonth() + 1}-${date.getDate()}`;
                                const morning = tasks[dateKey]?.morning;
                                const evening = tasks[dateKey]?.evening;
                                const privateNote = tasks[dateKey]?.privateNote;
                                return (
                                    <div
                                        key={`${wi}-${di}`}
                                        onClick={() => isCurrentMonth && openModal(day)}
                                        className={`
                    bg-white h-24 p-1 text-xs font-FontNoto cursor-pointer
                    ${!isCurrentMonth ? 'bg-gray-100 text-gray-400' : ''}
                `}
                                    >
                                        <div className="text-right font-semibold">{day}</div>

                                        {holidayName && (
                                            <div className="text-[10px] text-red-500 leading-tight font-FontNoto">{holidayName}</div>
                                        )}

                                        <div className="text-[8px] mt-1 space-y-1">
                                            {morning && (
                                                <div className="bg-blue-100 text-blue-800 px-1 py-0.5 rounded-sm font-FontNoto">
                                                    {morning}
                                                </div>
                                            )}
                                            {evening && (
                                                <div className="bg-green-100 text-green-800 px-1 py-0.5 rounded-sm font-FontNoto">
                                                    {evening}
                                                </div>
                                            )}
                                            {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏ô‡πâ‡∏ï‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ */}
                                            {privateNote && (
                                                <div className="bg-yellow-100 text-yellow-800 px-1 py-0.5 rounded-sm truncate font-FontNoto">
                                                    üóíÔ∏è {privateNote}
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                );
                            })
                        )}
                    </div>
                </div>
            </div>

            {showModal && (
                <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50 animate-fade-in">
                    <div className="bg-white p-6 rounded-2xl shadow-2xl w-96 relative transition-transform duration-300 ease-in-out transform scale-100">
                        <div className="flex justify-between items-center mb-4">
                            <h3 className="text-lg font-bold text-pink-600 font-FontNoto">
                                üìÖ {selectedDate}/{month + 1}/{year + 543}
                            </h3>
                            <button
                                onClick={() => {
                                    setShowModal(false);
                                    setTaskData({}); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î
                                }}
                                className="text-red-500 text-lg font-bold hover:scale-110 transition"
                            >
                                ‚ùå
                            </button>
                        </div>

                        {/* Step 1: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó */}
                        {!taskData.noteType && (
                            <div className="mb-4 flex flex-col gap-3 items-center">
                                <p className="text-center font-bold text-gray-700 font-FontNoto">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°</p>
                                <button
                                    className="btn btn-info w-full font-FontNoto"
                                    onClick={() => setTaskData({ ...taskData, noteType: "public" })}
                                >
                                    üóìÔ∏è ‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÜ ‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ)
                                </button>
                                <button
                                    className="btn btn-warning w-full font-FontNoto"
                                    onClick={() => setTaskData({ ...taskData, noteType: "private" })}
                                >
                                    üîí ‡πÇ‡∏ô‡πâ‡∏ï‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß (‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
                                </button>
                            </div>
                        )}

                        {/* Step 2: ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏° */}
                        {taskData.noteType === "public" && (
                            <div className="mb-4">
                                <div className="mb-4">
                                    <label className="block mb-1 font-bold text-blue-600 font-FontNoto">{yesterdayLabel}</label>
                                    <textarea
                                        className="textarea textarea-bordered w-full bg-blue-50 font-FontNoto"
                                        value={taskData.morning || ""}
                                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô"
                                        onChange={(e) => setTaskData({ ...taskData, morning: e.target.value })}
                                    />
                                </div>

                                <div className="mb-4">
                                    <label className="block mb-1 font-bold text-green-600 font-FontNoto">‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</label>
                                    <textarea
                                        className="textarea textarea-bordered w-full bg-green-50 font-FontNoto"
                                        value={taskData.evening || ""}
                                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
                                        onChange={(e) => setTaskData({ ...taskData, evening: e.target.value })}
                                    />
                                </div>

                                <div className="flex justify-end gap-2 mt-2">
                                    <button
                                        className="btn btn-outline btn-error font-FontNoto"
                                        onClick={async () => {
                                            const date = new Date(year, month, selectedDate);
                                            await deleteTaskFromDatabase(date);

                                            const key = `${userId}-${year}-${month + 1}-${selectedDate}`;
                                            const updated = { ...tasks };
                                            if (updated[key]) {
                                                updated[key].morning = "";
                                                updated[key].evening = "";
                                            }
                                            setTasks(updated);

                                            if (
                                                new Date().getDate() === selectedDate &&
                                                new Date().getMonth() === month &&
                                                new Date().getFullYear() === year
                                            ) {
                                                setTodayPlan(prev => prev ? { ...prev, morning: "", evening: "" } : null);
                                            }

                                            setShowModal(false);
                                        }}
                                    >
                                        ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô
                                    </button>
                                    <button className="btn btn-outline btn-success font-FontNoto" onClick={saveTask}>
                                        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                                    </button>
                                </div>
                            </div>
                        )}

                        {taskData.noteType === "private" && (
                            <div className="mb-4">
                                <label className="block mb-1 font-bold text-purple-600 font-FontNoto">üîí ‡πÇ‡∏ô‡πâ‡∏ï‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</label>
                                <textarea
                                    className="textarea textarea-bordered w-full bg-purple-50 font-FontNoto"
                                    value={taskData.privateNote || ""}
                                    placeholder="‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏ô‡πâ‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"
                                    onChange={(e) => setTaskData({ ...taskData, privateNote: e.target.value })}
                                />

                                <div className="flex justify-end gap-2 mt-2">
                                    <button
                                        className="btn btn-outline btn-warning font-FontNoto"
                                        onClick={async () => {
                                            const date = new Date(year, month, selectedDate);
                                            await clearPrivateNoteFromDatabase(date);

                                            const key = `${userId}-${year}-${month + 1}-${selectedDate}`;
                                            const updatedTasks = { ...tasks };
                                            if (updatedTasks[key]) {
                                                updatedTasks[key].privateNote = "";
                                            }
                                            setTasks(updatedTasks);

                                            if (
                                                date.getDate() === new Date().getDate() &&
                                                date.getMonth() === new Date().getMonth() &&
                                                date.getFullYear() === new Date().getFullYear()
                                            ) {
                                                setTodayPlan(prev => prev ? { ...prev, privateNote: "" } : null);
                                            }
                                            setShowModal(false);
                                        }}
                                    >
                                        ‡∏•‡∏ö‡πÇ‡∏ô‡πâ‡∏ï‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
                                    </button>
                                    <button className="btn btn-outline btn-success font-FontNoto" onClick={saveTask}>
                                        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                                    </button>
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            )}

        </div>
    );
};

export default Workplan;
